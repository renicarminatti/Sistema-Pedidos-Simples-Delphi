unit Controller.Clientes;

interface

uses Model.Cliente, uDM, SysUtils, Data.DB, FireDAC.Comp.Client;

type
  TControllerClientes = class
  private

  public
    procedure CarregaCliente(Codigo: Integer; Cliente: TCliente); overload;
  end;

implementation

{ TcontroladorCliente }

procedure TControllerClientes.CarregaCliente(Codigo: Integer; Cliente: TCliente);
var
  Erro: string;
  QRY: TFDQuery;
begin
  QRY := TFDQuery.Create(nil);
  try
    with QRY do
    begin
      Connection := DM.conMySQL;
      Close;
      SQL.Clear;
      SQL.Add('SELECT');
      SQL.Add(' CODIGO,');
      SQL.Add(' NOME,');
      SQL.Add(' CIDADE,');
      SQL.Add(' UF');
      SQL.Add('FROM');
      SQL.Add(' CLIENTES');
      SQL.Add('WHERE');
      SQL.Add(' (CODIGO = :CODIGO);');
      ParamByName('CODIGO').AsInteger := Codigo;
    end;
    try
      DM.conMySQL.StartTransaction;
      DM.conMySQL.Commit;
      QRY.Open;
      Cliente.Codigo := QRY.FieldByName('CODIGO').AsInteger;;
      Cliente.Nome := QRY.FieldByName('NOME').AsString;
      Cliente.Cidade := QRY.FieldByName('CIDADE').AsString;
      Cliente.UF := QRY.FieldByName('UF').AsString;
    except
      on E: Exception do
      begin
        Erro := 'Falha ao Carregar Dados do Cliente ' + IntToStr(Codigo);
        Erro := Erro + sLineBreak + E.Message;
        raise Exception.Create(Erro);
      end;
    end;
  finally
    FreeAndNil(QRY);
  end;
end;


end.
